var puzzleInput = 
`5 + (9 + (7 + 5 + 3 * 8 + 4 * 6) + 9 * 8 * 7)
(6 + 9 + 2 * 7) + ((6 + 3 + 9) + 5) + (6 * 7 * 7 + (2 * 4 + 2 * 8 * 5 + 3) * (3 + 3 + 6) + 9)
3 + 8 * 4 * 4 * (3 + 4 * 5 + 7 + (4 * 4 + 4))
(7 + (2 + 2) * (9 * 8 + 6)) + 2
(5 + (8 + 9 + 2) * 2 + 8 + 2 * 8) + 4
5 * 9 * (7 + 8 + 6 * 2 + (2 + 4 * 2) * 5) * 9 + 4
4 * (9 * 3) * (2 + 5 + 4 * 7 * 9 * 4) + 6 + (3 + 9)
8 + 9 * (7 + (5 + 8 + 2 * 4 * 4 + 9) + 3 + 4)
(3 + (9 + 6) * 8) + 3 * 8
6 * 7 + (8 + 7 + 7)
2 * 3 * 4 + (3 * 2 * (3 * 6) + 5 * 4 * 4) + 5 * 5
4 * ((5 + 9) + 4 + 6 * 3 + 7 + 6) + 7 + (8 * 7 * 8 * 2 * 6) + 7
((6 * 9 + 3 * 2 * 9) * 4 * 2 * (7 * 6 * 3 * 6 * 4 * 4) * (9 * 5 * 3 * 6 * 4 + 2) + 8) + 9 + 9 + 9 + 9
(2 + 4 * 3 * 6) + (5 + 8 + 3) * 2 + (2 * 8 + 2 + 9)
5 * (4 * 2 + 3) + 5 * 3 + 3
6 * 8 + 5 * ((8 * 9 + 3 * 4 + 4) * 7 * (3 + 6)) * (7 + (8 * 6 * 5 + 3 * 9) * 8 * 7 + 5 * 5) + 6
(7 + 9 * 5 * 5) * 6 + 9 + 8 + (8 + 6 * 6) * 8
(8 + (2 * 7) * 3 * 8) * 6
3 * ((2 + 7 * 3 + 5 * 3) + 9 * 5 + 2) + 2
((4 + 4 + 4 + 4 * 5 + 4) * (2 * 9) * 6 + 5) + ((6 + 3 * 6) + 6 * (3 * 5 + 7) + 9) + 2 + 8 * 4 * (6 + 2 * 5 + 8)
7 * 9 * 7 + (4 * 3 + 5 * 6 + 2) * 5
5 + ((6 + 4 + 4) + 5)
9 * 4 + 3 * 5 + 6 * (4 + 5 + (3 + 8 * 6 * 9 + 4) * 5)
2 + 9 + 9 + (2 * 6) * (8 * 8 * 2)
(6 * 2 * 3 + 4 * 8 * (3 + 8 + 2 * 5 * 5 * 2)) * 4 + 8 * 7 * 8
(8 + (7 * 3 * 6) * 4 + 8 * 2 + 6) * ((5 + 5 + 9) + 9 * 4 * 2 + (5 + 9 + 9) * 9) + 2 * 9 * 5
(6 * 3 + 7 + 8 + 6) * 3
7 + 3 + (3 * 8 + 2 + 3 + 7) * 7 + 4
((4 * 2 + 7 + 4) * (7 + 4 + 9 + 5)) * 9
9 + 4 * (5 * (6 + 9 * 2)) + 2 * 4 + (8 * 9 * 5 + (3 * 6 * 9 + 8 + 9 + 2) + 8 * 4)
8 * 2 + 3 * 5 * 7
((4 + 2 + 8 + 7) + 5) * 7
6 + 7 + ((9 * 3 + 7 + 2 * 2) + 3 + (2 * 5 + 3 * 3 * 3 + 3) + 5)
(7 + 6 + 4 * 4) + 7 * 6 + 3
8 + 8 * 2 + (8 + (9 + 2 + 5))
6 + 7 * 6 * 6 * ((5 + 6 + 5 + 6 * 6 + 2) + (6 * 4) * 7 * 4) + 3
((8 + 2 + 6) + 7 + 6 * 7 + 5 * 5) + 5 * 4
2 * ((2 * 8 + 8 + 5 + 8) + 6 + (7 * 8 + 8 + 2)) + (7 * (5 * 4 + 5 + 5 + 7 + 8) * (9 * 9 + 5 + 2) + 8 + (8 + 3 + 7 * 5 + 2 * 8)) + 2
4 + 6 * ((3 * 6 + 2 * 5 * 9 + 4) * 7) * 6 + 4
2 + 2 * 3 + 3 + 6 * (5 * 8 * 7 * (7 * 4 * 9) * 7)
8 * 5 + 9 + (8 + 6 * 5 * (7 + 7)) * 2 + 5
4 * 7 * 7 + (5 * 8 * (6 * 7 + 9) * 7 * 8 + 4) * 9 * 9
8 * 7 + 2 + 9 * 6 + (4 + (2 * 8 + 7) * 2)
7 + (7 * (5 * 8 + 7 + 5 * 6 + 5))
7 + (7 * 2 + (3 + 8 + 7 + 9 * 6 + 6)) + 3
((4 * 2 * 3) + 5 + 2 + 9 * 6) * (8 * 8 * 6)
(3 * (4 * 8 + 3 + 5 * 7) * 9 + (6 * 4 * 4 + 9 * 5 * 7) + 3 * 3) + 6 * 6 + 4 + (2 * 8 + 6 * 9 + 8 + 3) * 7
4 * 2 + 6 * 6
6 * 4 + (6 + 3 * 3 + (6 * 6) * (2 + 9 + 5 * 2)) * 9
2 + 3 + 6 + 9 + 6 + 4
7 + 5 + 3 + (8 * 5 * (8 * 2 + 7 * 5 + 5 * 8) * 8 + 3 * (4 * 7)) * 5 + 6
6 * 2 * 2 * 7 + (7 * 4 + 9 + 6)
4 + 3 + 8 * 6 * 7
4 * ((7 + 4 + 7 * 2 * 4 * 5) + (7 + 4 + 7 + 7 * 7 + 4) + 4 + 3 + (2 * 8 * 4 * 9 + 5) + 7) + 8 * 6 + (2 + 3 * 3 * 2 * 4) + (9 * 7 + 8 * 4)
(3 + 8) + 4
(5 * 3 * (4 + 7 + 7 * 4) * 4 * (5 + 4) + 6) + (4 * 7 + 2 + 3) + 7 * 6
(7 * 2 * 3 * (8 * 2 + 8 * 4 * 9)) * 7 + 8 * 4
9 + 2
6 + 4 + (4 + 7 * 9 + 6 * (2 * 2 + 9 * 6 * 2) * (3 + 7 + 6 + 6 * 9))
9 + ((5 * 9 * 4 + 3 + 2 * 6) + 9 * (7 + 4 * 7 * 6 * 3 * 8) * 4 + 4 + (5 * 8)) + (7 * 3 + (2 + 6 * 9 + 9 + 3 + 4) * 5) + ((4 * 4 + 5) * (7 * 3 + 5 * 7) * 6 + 9 * (3 * 2 * 5 * 2 + 3))
3 * 9 + 8 * ((4 + 2 + 5 * 2) * 7) * (5 * 7 * 9 * 8 + 2 * 6)
6 + 7 * (2 + 7 + (8 + 6 + 3) + (9 * 8 * 6)) + 3
(3 + 7 + 3 + 7 * 3 + 8) * 3
5 * 9 + 3 + 3 + 4 * 9
7 + (2 * 4 + (9 + 7)) * 4
(6 + 5) + 6 * 6 + 7
(6 * 7 * 9 * 7 + 4 + 6) * (6 * 4 * 7) + (2 + 5) + (7 + 5)
4 + 6 * 9 + 4 * (5 * (3 + 7 + 8) + 5)
6 * 3 * (3 * 3 + (6 * 3 + 3 + 4 + 5)) + (4 * 3 * 9) * 4 * 5
((9 + 6 + 2 * 8 * 9) + (9 + 5 * 3 + 4 * 4 + 9) * 4 + 8 * 7) * 4 + 4
5 + 5
4 + 6 * 4
3 * 7
4 + ((3 * 4 * 7 + 2 + 6 * 7) + 9) * 3 * 9
7 + 8 * (9 * 2) + 3 + 5
(7 + (3 * 6 * 5 + 9 + 4) + 8 * 9 * 4) + 6 * 5 * ((7 + 9 + 7 * 2 + 4) + 4)
6 * (8 * 5 + 8) + 6 * (7 + 6 * 5)
(9 * 7) + 7 * 6 + 2 * (7 * (9 + 9 * 6 + 5 * 6) + (7 + 2 + 4 + 7))
(6 * 9 * 5 * 9) + 2 * 9 * (3 + (5 + 4 * 2) * 8 * 9) * 3
(3 + 2 * (4 * 9 * 2 * 8 * 3 * 9) * (9 * 4 + 9) * 5) * (5 * (8 * 7 + 2 * 4 * 3 + 3)) + 6
4 * 9 * (2 + 5 * 9 * (7 * 5) + 9 * 5) + 5 * 4
(7 * (9 + 3 * 7 + 9)) * 5 * 7
(7 + 9) * 3 + 7 * 6 + 7 * (7 + 7 * (7 + 5 + 8 + 8 + 9 + 4) + 9 + 9 + 8)
7 * 7 + 3 + ((9 * 2 + 7) * (7 * 2 * 3 + 6 + 7) * 7 * 8) * 9
(4 + (5 + 2) * 3 * 4) * 6 * 8 * 2 * (3 * (3 + 7 + 2 + 2 * 4 + 3))
6 + (7 * 3) * 9 * ((4 * 8 * 8) * 9 + 5 + 5)
4 * ((8 * 9 * 2 * 7 + 4) * 8) * 3 * 5
8 * (8 + 2 * (9 + 6 * 9 * 4) * 2) * (4 * 8) + 2
6 + 9 + 5 * 7 * (3 + (9 * 9) + 2 * 9 + (6 * 4) + (7 * 6 * 3 + 3 * 5))
((3 * 3 + 3 + 4) + 9 * 7) * 3
5 * 7 + ((5 + 3 + 9) + 2 * 9) * 5 * (6 * (6 + 5 * 3 * 4 * 9) + (2 * 2 + 3 + 4 + 5 + 4)) * (2 * 3)
((8 * 2) + 7 * 2 * 6 * 7) + (6 + 2 + 6 * 5) + (5 * 7 + 6 * 9) * 9 + 3 * ((8 + 7) * 3 * 8 * 2)
(3 * (3 * 8) + (7 + 3 + 8 * 7 * 9 * 9) * 8 + 2) * 9 * 8
7 + (6 + (9 * 6) + 8 + 9)
7 + (6 + 7 + 2 + 9 * (9 + 4 + 8) + 9) * 2 * 5 + (5 * 9 + 6 * 8) + 5
(8 * (7 * 9) * (4 * 6 * 7) * 5 + 9 * 5) * 8 + 5 * 4 * 6
5 + (5 + 6 + 9 * 7 + 3) * 3 * 5 * 8
6 + (6 + 9 + 4 * 6) * 8 + 6
4 * 8 * 6 + 2 + 9 + ((2 * 8 + 7) * 8 * (3 * 9 * 8 + 4 * 8 + 5) * 9 + 8)
8 + 9 + 4 + 8 + (3 * (9 + 6) + 9 * 9 * 5) * 2
6 + (4 + 7) * 5 * 2 * 8 * 3
4 + ((4 + 7 * 9) + (2 + 9 + 9 * 6) * 2 + 9)
6 + ((4 + 6) + 8 + 8 + 4 * 7) * (8 + 7 * 2 * 3 + 2) + 6 + (4 + 3)
6 + ((6 * 6 * 6 * 3 + 4) * (5 + 3 + 9 * 2 * 7 + 9) * (4 * 3 + 3 + 9 + 7) * 9 + (9 * 8 + 3 * 6 * 9 * 7)) + 3 + 2 + 2 * 8
8 * 5 + 2 * 7 * (9 * 6 + 2 * (2 + 5 + 3 + 3 * 2 * 3) + 7) * 6
(8 + 9 * 9 + (6 * 6)) * 3 * 8 + 5 + 7
2 + (4 + (2 + 2 + 5 + 2))
(4 * 4 + (6 * 6 * 7 + 7 * 9)) + 3
8 + 6 * 6 + ((8 * 8 * 8 + 3 * 5 * 8) + 8 * 9) + 3
2 + ((7 + 9 + 8 * 3) + 5 * 4 * 8 * 4 + 5) + 7 + 3
6 + 7 * 3 + 3 + 9 * (2 * 4)
5 + (6 * 7 + 5 + 7 + 5) * 5 * 5 * (7 + 3 + 2 * 9 * 9 + 4) * (2 * 3 + 2 + (9 + 2 + 2 * 5))
7 + 7 + (7 * 6 * 6 + 6 + 5)
7 * 2 + (2 * (2 * 8) * (8 * 7 + 9 + 5) + 5 + 4 * 8) * (2 + 9) * 3 * 6
(7 + 6) * 8 + (2 + 2) + 9 * 6 + (9 + 6 * 2)
9 * 4 * (6 + 8 + 3 * 6 + 3) * 2 + (2 + (4 + 7) + (8 + 4 * 2 * 2 * 7 + 2) + (6 + 6 * 9 + 3 + 6) * 3 + 2) + 2
9 + ((9 + 9 * 3 + 2) + 2 * 5 + 7 + 2 * 3)
8 + 5 + 4 * ((8 * 5) * 7 + (8 + 5) * 4 + 8 + 3) * 9
3 + 5 + 7 * 8
4 * 9 * 4 * 8 + (9 * 3)
(9 + 4 * 3 * 9 + 9) + 5 + 8 + (6 + 9 + 9 * 2 * (5 + 4 + 3 * 6 * 4))
5 + (9 * 6 * (2 + 9 * 7) * 9 * (7 + 5) * 6) * 7 + 6 + 5
(4 * 8) * (4 + 6 * 3 * 5) * 4 + 4
4 * 5 + (8 * (6 + 9 + 2 + 7 + 7 * 5) * 5) + 5 * 7 * 4
4 + (3 + (5 + 5 * 8 * 7 * 2) + 4 + 7) + (7 + 8 + (9 + 4 * 3 * 3)) + (6 + 2 * (6 + 8) * 7 * 8) * 7
6 * 6 * (4 + 5 + 2 * (7 + 8 + 2 * 8 * 3) * 3 * 2) + 2 + (5 + (5 + 9) * 7 + 9) + 6
5 * 9 + 3 + (6 + 7 + 6 * 2 * (9 * 8 + 3)) + 6 + (3 + 9 * 3 + 7)
5 * 4 + 9 * 2 * (4 * 3 + (7 * 5) * 4)
4 * 4 + (7 + 2 * 8 + 5 * 5 * 2) + 5
5 * 9 * 9 + 7 + ((4 * 5 * 6 * 9 * 3) * 3 * 7 * (3 + 3 + 3 + 9)) * (4 * 9)
3 + 7 + 6 * (5 + 3 * (4 * 6) * 8 * (2 + 3 + 7 * 9) * 8) + 2 + (7 * 9)
7 + 3 * (6 * (7 * 7)) + 5
6 + ((7 + 9 + 4 * 8) * 5 * 2 * 8 * 5) + 5
9 + (4 + 4) + 8 * 3
2 + (2 + 9 * 2 * 4 * (7 * 6 * 2 * 8) * 8) * 2 * 5 + 4
9 * ((2 + 4 + 9) * 8 + 8 * 9)
(6 + 4 + 7 + 5 + (8 + 2 * 2)) * 8 + 3 * 5 * 7
(4 * 8 * 6 + 4) + 5
6 * 9 + 4 * 6 + (6 + 3 + 4 * 9 * 9 + 5) * 2
4 + (7 * 7 * 3) + 7 + 9 + 8 * (8 * (9 + 6) * 9 + 3 + 5)
6 * 6 + 2 * 4 + 2
9 + (4 + 7 * 2 + 9 * 6) + 4 + ((9 * 7 + 4 + 8 + 3) * (4 * 6 + 5) * (6 * 8 * 2)) + 8
5 * 4 + (5 + (8 * 2 * 5 * 7 * 6) * 5 * 7 * (4 * 7 + 7 + 5 + 6 + 5) + 4) + 3
5 * 6 + (5 + (5 * 7 + 3 + 9 + 3)) + ((6 + 9 + 4 * 4) + 5 + 4) * 8 * (5 + (9 + 9 + 7))
2 * 4 + (7 + (8 * 3 + 4 + 6) + 8 * (5 + 4 + 2)) * 6 + (2 * 7 + 2 + 9)
7 + 3 + 7 + (3 + 9)
4 * 7 + 9 + ((7 * 3) * 6 * 4) + 7 * (3 + 9)
3 + 6 + (8 + 2) + 9
(9 + 7 + (2 + 9 * 5)) + 2
2 + (8 + (5 * 6 + 5 + 2 * 3 * 7) * 4 * (8 * 8 * 7 * 2 * 4 + 8) * 5 + 6) * ((3 + 4 + 8 + 6 * 7) * 7 * 9 * 8)
4 + (3 + (6 * 4 * 5 * 4) * (6 + 4 * 4 + 3)) + 9
3 * (2 * 4 + 3) + ((4 * 2 + 9 + 9) * 4 * 9 + 4) + 7 + (8 * 7 + 2 * 6 + 8 + 6) + 4
7 * (5 * 4 * 8 + 4)
(2 * 9 + (7 * 3 * 2 + 3 * 6) + (5 + 6 * 5 * 6 * 4 * 7) * (7 + 6 * 9 + 3 * 5)) * 2
(7 * (3 + 7 * 9 + 5 * 7) * 2 * 9 * 5) * 8 * (2 + 2 * 5 + 8 * 4 * 2) + 5
(4 + (9 * 5 + 8 + 8) + 7 * 4 * 6 * 4) + 4 + 5
7 + 9 * (4 + 2 * 2) + (8 + 7 + 9)
4 * 5 * (8 + 6 + 9) + 5
(7 + 7 + 4 + 7 * (6 * 6 * 9 * 2 + 2 + 8) * 3) * 4 * 5 * 9 + 3
8 * 7 + 2 * (8 * 7 * (9 * 8 * 2 * 5 + 5) * 2 * 5) + 3
(4 * 7) + (9 + 5) * 4
5 + 9 * 6 + 2 * 7 * 2
4 * 8 + 6 * ((4 + 6 + 2 + 9 * 4 * 7) + 9 * 8 + (4 + 6 * 9 * 8 * 3) + 2 + 5)
3 + (4 * 2 + 7 + 2) * 4 * 2 * 8
6 * 9 + ((3 * 3 + 2 * 2 + 4 + 9) * 6 + 5) + 2
8 + 2 + ((6 * 8 * 5 * 6 * 6) * 3 * 5 * 8)
8 + (5 * 4 + (7 + 7 * 6 + 3) * 8) * 3 * 8 + 2 + 8
((6 + 9 + 7 * 7) * 4 + 5 + (8 + 9 + 5)) * 4 * 5 + 2 + 5 * 5
(3 * 2 * 9 + 4 * 5 * (5 + 9 * 8 + 2)) + 8 + 7 + 7
((6 * 6 * 4 + 2) * (3 * 3 * 5 + 4 * 6) * 3) + 6 * 4 + 6 * 6
5 + 9 * (4 * 7)
5 + 3 + 2
((9 * 3 * 9 + 6) + 5) * 5 * 4 + 8 + 9 * 3
(9 + (4 + 5 * 9 + 4) + 4) + (5 * 2 + 2 * 5 * 8 * 9) * 8 + 8
((8 * 3 + 7) + 6 + 7 * 9 + 2) * 9 * 8 * 9 * (5 + 8 + 3 + 4 * 4 * 5) + 8
(5 + 8 + 4 + 5 + 7) + 8 + (5 * (9 * 8) + 6 * 9) * 8 * 3 + 2
(2 * 8 + 2) + 4
(4 + 5 + 2 + 3 + 9 + 5) + 6 + (6 + 9 + (4 * 8) + 2 + 2) * (4 + 7 + 5 + 5 * 8 + 8) + 8
9 * 2 + 3 * (3 + 3 * 3 * 7) * 5 * 8
(7 * 6 * (2 * 9 * 8) * 6 + 2 + (2 + 2 + 7 * 5 * 4)) * 6 * 7 + 2
5 * 2 * 5 + (7 + 4 * 7 * 2 + 7) * (8 * 6 * 2 * 9 * 4)
7 + 9 + (4 + 6) + ((5 * 3 + 8 + 7 * 6 * 9) + 2 + 5 + 3) * 9 + (9 * 6 * (4 + 5 * 8))
((2 * 7 * 6 + 2 * 5) + (5 + 4 + 3 * 5 + 5) + 5 * 9) + 2 * 3 + 8 * 2 * 9
9 * 4 + 7 * (8 + 7) + 2 + 5
6 * ((9 * 4 + 3 * 2 * 9) + 9 + 3 * (2 + 3) * 6) + 7 + 9
5 + 5 + 6 + (3 + 3 + 9 * 3) * 8
9 * ((9 + 8 + 9 * 3 + 3) * 6 + (8 + 3 + 3)) * (8 * 2)
(2 + 4 + 3 + (8 + 5 + 6 * 7 * 2) * 4) + 8
9 * (4 + 7 + (6 * 6 + 2 * 7) + 2 * 4) * 5
2 + 8 * 4 * 6 + 6
((9 + 3 + 9 * 3 * 9) * 7) * 7 + 6 + ((6 * 4 * 2 * 7 * 6 * 7) * 2 * 5 * 4) * 3 + (4 * 9 * 5 * (7 + 5 * 9 * 3))
5 * (3 * (8 + 8 * 4 + 8)) + 6 + 4 * 3 * (6 + 7)
4 + ((8 * 6 + 5) * 6 + 9 * 7 * 6) * 8 + (3 * 9 * 5 * (2 * 3 + 8 + 4 * 8 + 6) * 2) * 3
2 * 2 + ((7 + 2 * 9 * 6 + 6 * 5) + (8 + 3 * 4 + 2 * 3) * 3) + 3 * 9
3 + 5 * 6 + (9 * (8 * 8 + 4 + 3) * 5) + 2
2 + 7 * (3 + 8) + (4 + 9 + 5) + 7
3 * 7 * (3 * 4 + 5 * 5 + 9) + (7 * (5 * 6 * 6 + 5 * 5) * (2 * 5) + (8 + 9) + 8) + ((3 + 6 * 2 * 3 + 7 * 3) + (8 * 6 * 6 * 3))
8 + 9 + ((5 * 3) + 3 + 9 + 3 + 4 * 3)
4 * 8 * (5 * (7 + 6 * 9 * 3) * 4 * 2 * 7) * 2 + 6 * 3
9 * 4 + (4 + 6 + 6 + 7) * 4
(7 * 3 + (6 * 2 * 6) + 5 + 2) * 9 + 2
4 + (8 * 7 * 3 + 4) + 8
8 * (6 * 3 + 5 * 7 * 3 * 5) * 4 + (2 * 4 * 8 + (7 + 9 + 6 + 2 + 5) * 2 * 8) * 3
6 + 3 * 5 * 4 * (7 * 4 * 6 * 5 * 3) * 2
(4 + 8 * 4 + 9 * 8) + (3 + 7 * 4 + 4 + 4 * (3 * 3 * 4 + 9 * 7)) + 3
8 * 9 + (2 + 6 + 7 * 6 * 6) + (9 + 6 + 6) * 4 * (7 * 2 + 2 + 7 + 4 + 3)
(3 * 8 + 2 + 5 * 5) * (8 * 4 * (2 + 9) * 5 + (8 * 8 * 4) * 6)
(6 * (9 + 8) * (6 + 7 + 2 * 8 * 8) + 2 + 8) * 7
7 + (4 + 6 + 7 + (7 * 7) * 5) * 6 * 4 * 2
3 * ((5 * 7 * 4 + 3 * 7 * 5) * 2 * 8 * 2 + 8) * 4 + 4 * 3 * (3 + 7)
7 + ((6 * 5 + 6) + 5 * (5 * 7 + 6 * 3 * 9) * (3 * 4 + 7 * 9) + 5 + 5) + 9 * 8 * (2 * 8 + 6)
(9 + 8 + 8) + 3 + 2 * 9
(2 * 5 * 4 + 9 + 9) * 5 * (2 * 9 + 2 * 4 + (4 * 8 * 9 + 8) + 3) + 3 + 2
(6 + 5 + 3) * 9 + 6 * ((2 * 6 * 3) * 4 * 6)
8 + 8 + 6 * (5 + 5) + 4
3 * 5 * ((9 + 7 * 4 * 6 + 7 + 5) * 3 * 2 * (3 * 8 + 4 * 3 + 7) + 4 * 4)
9 + 6 * 5 + 7 * (4 * 6 * 8)
((5 * 4 + 2 + 7 * 4 * 2) * 2 * 5) * 4 * (2 + 9 * 9 + 9 + 7 + 9) * 4 * 9 + 5
7 * ((6 + 7) + 5 + (3 * 4 + 5) + (3 + 8) * (5 * 2 * 4 + 8))
((8 + 8 + 3) * (5 + 9 + 9) * 4 + 2) * 6 + 8 + 2 * (5 * 8 + 3 + (8 + 5 + 7 + 9 + 4 * 6)) + 6
(6 + 2 * 2) + 8 * 9
2 * 6 * 7 * 2 + 8 * 8
8 + 3 + (6 * (2 + 2 * 8 * 4 * 6 + 2) + (7 + 4 * 8 * 3)) + 9
6 * 8 + (4 * 8 * (8 * 5 + 6 * 7 + 2 + 4) + 3 * 7 + (5 * 9)) + ((8 + 7 * 6 + 3) + 5) * ((3 + 6 * 9) * 8 + 7 + (6 + 3 * 2)) * 8
((2 + 4 * 7 * 4 * 6 + 8) * (6 * 5) + 3 * 3 + 9) * 4 * 6 * 4 + (7 + 4) * 4
(3 + 7 * (8 + 4)) * 9 * 9
(8 * 9 * 3 + 5 + (6 * 7 + 3)) + (6 * 2 * 3 + 7) * 8 + 2 * 8
(9 * 7 * (5 + 5)) + 3 + 3 * (2 + 3 * 2 + 3)
4 + (4 * (4 + 6 + 3 * 3) * 5)
(9 * 4 * 7 + 2) * (6 + 3 + 5) + 6 + 3 + 3 + 6
7 * 5 * 9 + (6 + (4 + 3 + 6 + 7) + 4) * 8 * 6
2 * 2 + 5 + ((5 * 3 * 9 + 2) + (3 + 7 * 9 + 7 * 6 + 2))
8 * ((7 + 3) * 4) * 3 + 2
(5 * 8 * 8 * (2 + 9)) + ((8 * 6 + 4 * 8 * 3) + 3 + 3 * 4 + 4) * 7
(3 + 6 * 7) * 8 * (3 + (9 * 6 + 8 + 9 * 8 + 7) + (5 * 4)) * 5
9 + 8 * 8 + 4 + 4 + 3
5 + 9 * 7 + (4 + 2) + ((9 + 5 * 8 + 2 * 7) + 4 * 9 * 3 * 4)
4 + 5 + 4 + ((5 + 9 + 8 + 2) * 8 + 3 * (9 + 9 * 3 + 9 * 3 * 4) + (2 * 9 + 6 * 5 * 8) * 3)
5 * (4 * 9 * 4 * 4 + 4) * 4 + 9
7 + 6 * 6 + (8 * 9 * 4) * (4 + 8 * 5 * 7) + 4
2 * (2 + 9)
9 + 4 * ((4 + 6 + 9 + 4 * 9) * 3 + 9 + (4 + 8 * 8) + 8) + 4
2 + 6 + (3 * 9 + 4) + 9 * (6 * 8 + 9 + (2 + 6 + 5 * 2 * 5) + 2) * 2
(2 + 2 * 9 + 9 * 8 + (9 * 8)) * 4 + 4 + 7 * (5 + 3) * (4 * (5 + 9 + 8 + 2 + 8) * 4 + 3)
(5 * 7 * 6 * 3 + 7) + 8 * 3
(9 + 9 * 2 * (7 * 3 * 4)) + 2 * 2 * (6 * 5 + (7 * 4 * 2 * 3 + 6 * 5) * 4 * (3 + 8 * 2))
6 + (8 * 4 + 5) * 9
9 + 5 * (4 * 9 + 3 * (3 + 4 * 5 + 7 * 7)) * 6
9 * (7 + 7 + 9 * 5 * 5 * 2) * 2 + 4
7 + 6 + 9 + 5
9 + 3 + 8 + (8 + 6 * (5 + 7 * 2) + 7 + (2 + 7 * 3 * 4 * 4 + 4) + 9) + (6 + (4 + 8 + 8 * 6 * 4) + 4 + 6) + 3
(3 + (4 * 5 * 5 * 9)) * (3 + (8 * 9 + 7 * 6) * 7 + (9 + 4 * 5 + 6) + 3) * 5 + 4
5 * 4 * (5 * 3) * 8 + 4 + 5
7 * (8 + 3 + 7 * (3 * 8 + 2 + 6 * 9 + 6)) + 5 * 8 + 6 + 4
6 * (9 + 2 + 2 + 7 + 6) * 7 + 8 * 6 + 8
8 * (9 * (7 + 2 * 7 + 5 * 6) + (2 * 4 * 3 * 4) + 2) * (6 * 4 * 2 + 5 + 3 + 5) + 6
(7 * 4 + 8) + 8 + 2 * (8 * 3 * 7) + 5
4 + 8 + 8 + 6 * (3 * 6 * (3 + 7 + 9 * 8 + 4) + (6 + 3 * 8 + 7 + 8 * 9)) * 7
(9 * 8 * (2 + 8) * 8 + 4 * 4) + (6 * 4 * 9 * 6) * (4 * 9 * 7 + 4) + 6 * 4
9 + 5 * 3 + (6 + 4 * 9 + (8 * 4 * 5 + 2) + 9) + (3 + 9 * 6 + 5 * (5 * 3 + 5))
4 + (9 + 9 * 6 + 8 * 2)
8 + 8 * 6 + 7 * 9 * (8 + (9 * 5 + 7 + 5))
(9 * 6 + 4 + 8 + 7) * 9 * 2 + (3 * 7 * 8 * 5 * 2)
((8 * 7 * 6 + 5 * 2) * 6 + 3) * (7 + 7 * 8)
4 + 5 + 6 * (6 * 5 + 5 * 3)
(5 * (8 + 3) * 9 * 2 * 3 * 5) + 4 + 8 + 7 * 3
(2 * (9 * 2 * 5 + 7) + 2) * (7 * 8 + (9 + 9 * 8) * 8) * 9
(7 * 8) * 5 + 9 * 4 + (8 + 6 + 9 * 3 + 5)
8 * 7 * 7 + ((8 * 7 * 2 * 4 + 4) * 5 * 8) + 9
4 * 8 * (6 + 9 * 5 + 9 + 4 * 9)
5 * 5 + (4 + 7 + (3 + 6 * 8 * 2 + 6 * 5)) + 2 + (8 * (6 * 3) + 3 * 6 * (5 + 8 * 9 * 9) + 8) + 3
4 + (5 * 9 * 3 + 9 + 9 + 8) + 5 + 4 * 3 * 4
9 + (4 + 3 * 2 * (7 + 8 * 8) * (2 * 9 * 7 * 5 * 4) + (3 + 9 + 7 * 9 * 4 + 6)) * 2 * 3 * ((5 + 6) * 5 * 5 * 2)
6 + ((9 * 9 + 9 + 9 * 5) * 4 * 2 * 8) * 5 * 4 * 9
9 * ((8 + 6 + 7 + 6 + 8) * 2) + 6 + 5 + (3 * 5) + (2 + (9 + 3) + 9)
5 * 5 * 7 + 7 * 6
(4 + 7 * 4 * (6 + 7) + 7) * 4 * 4 * 6 * 7
2 + 2 * ((5 * 4 + 5 * 9) * (9 * 2 + 4 * 7)) * 3 + 2
(3 + 2 * (5 * 4 + 9 + 3 * 7)) + 9 + 4
8 + ((4 + 3 * 9) * 2) + 6
3 * ((7 * 8 + 5 * 7) + 6) * 4 + 8 + 3
(4 * 6 + 6 + (8 + 5 + 9 * 2)) + 9 * 4 * 3 * 9
(8 + (9 + 6 + 7 + 4 * 3) * 7 + 6) + 4 * 2 + 5
8 + 9 + (5 + 4 + (7 + 5 + 9 * 5 * 4 * 4) + (2 + 5 + 9 + 4 * 2))
(3 * (6 * 5 + 8 + 7 * 7 * 3) + (5 * 2)) * (5 + (6 + 5 + 8) * 2)
(7 + (7 * 7 * 4 + 2 + 4 * 5) + 7 + 9 + 7 + 7) + 6 + 6 + ((7 + 6 + 2 * 2) + 7 * 5) + 9 + 5
8 + ((3 + 9 + 3) + 7 + 8 + 2 * 6 * (7 + 2)) + 7 * 4
((3 + 2 * 4) + 6 * 2) * 4
4 * 9 + (8 + (4 + 8 + 6 + 9)) * 8 * ((9 + 8 + 2) + 8 + 8)
(5 + 5 + 8 + 2 * 5 * 8) * 4 + (5 + 2 * 5 + 4 + 9 + 2) + 5 + (9 * 5 * 9 + 6 + 4 * 4)
6 * 3 * 5
(6 + 9 + 8) + (6 + (7 * 6 + 6 + 5 * 9 + 7) * (4 + 6 + 3 + 9 + 2)) * (6 * (3 * 6) + 3 + 3)
2 * 3 + 2
9 + 4
9 * 2 * 5 + (6 * 5 * 7) * 6 * 4
9 + 4 * (5 + 6 * 4) * 8 + 7
6 + 2 * 2 + (7 * 6 * 3 + 6 * 9)
2 + (6 * 4) * (5 + 2 + 6 * 3 + (7 * 2 + 5 + 7 * 5) + 7) * 9 * 5
(3 * 4) + 3 + 9
2 + 4 + ((3 + 6 + 9) + 8 * 2 * (4 + 5 * 3 + 3 * 3 * 3) + 9 * 3) + 3
6 + 9 + 5 + (4 * 6 * 3)
3 * 9 + (5 * 3 + 2 * (4 + 2 * 9 + 2 * 8) * (7 * 5 * 9)) + 2 + 9 + ((4 * 9 + 5 + 6) * (3 + 5 + 5 * 4 + 7) + 3 * 7 + 3 + (3 + 3 + 2))
(3 + (5 + 3 + 7 + 4) * 3 * 8 + 4 + 7) + 3 * ((2 * 9 * 4 * 7) + (5 + 8)) + 3
9 * 2 * 6 * 7 + ((7 * 7 * 9 * 9 + 8) + 7 * 2)
9 * 7 * 5 * (6 + 3 + 3 * 3 * 9) * 2 + 5
8 * 2 + 2 + (2 + 3 * 9 * 9 + 4 + 9) + 4 * 5
5 + 5 + (8 + 7 * 6 + 8) + 3 + (2 + 6 * 2 * 2 * 6)
6 * (5 + 6 + 5) * (9 * 5 + 3) + 7
5 + 9 * (9 + 4 + 5 * 5 * 7 * 8) + 8 + (8 * 3)
8 * 4 + 8 + 9 + (2 + 6 * (6 + 7 * 4 * 3 * 4 + 7) * (3 * 2 * 4) * 9)
(9 * (4 * 8 + 4 * 3) + 7) * 8 * ((8 + 3 + 8 + 5 + 3) + 5 * 7 * 6 * 7)
8 + (6 + 7 + 9) * (5 + (7 + 8 + 9) + 9 * 7) + 8 + (9 + 7) + (2 + 8 * 5)
(5 + 6) * 2 + 2 + 9 + 3 + 5
7 + 6 * (3 * 2 * (6 * 7 * 3 * 9 + 3 + 2) * 6 + 7 + (7 * 5 * 7 * 2 * 9))
((3 + 8 * 6 + 3 * 7) * 9) * 8 * (2 + 8 * 2 + 7) + (7 * 4 + 7 + 6 * 6 * 6)
4 + ((4 + 6 * 2 * 2 + 5 + 8) + (7 + 7) + 5 * 7) + 7
8 * (7 * 7 + 8) + 6 * ((5 * 8 + 5 + 8 + 8) + (9 + 7 + 3) + (7 * 5 * 6 * 3 + 2 + 9) * 4 * (4 + 8 + 6 * 6 * 9)) + 7 * (9 * (2 * 2 * 6 + 7 * 9 * 4))
5 * 6 + 8 * 4
3 + (2 * 9 + 3) + 4 + 4 * 7 * 6
(3 * 5 * 6 * 4) + 5 * 2 * ((5 * 9) * 8)
(6 + 9 * 8 * 9 + 5 * 4) * 2 + 6
(9 + 8 * 3 + 9 + 7) + 3 * 4 + (8 + 6 * 3) * 7 + 8
(6 * (2 + 9)) * 2 * 6 * ((8 + 2 * 6 + 8) + 9)
(8 + 8 * 8 * 9 * (9 * 7 + 3 + 3)) + 2 + 8
((3 * 2 + 5 + 9 * 4) + 9 * (4 * 5 + 4) + (7 + 9 + 6 + 4 + 8) * (3 * 9 * 3 * 5) * 4) + 8 + 2 + (7 + 5 * (2 * 5 + 6) + 5 * 7) + 8
6 + 7 * 3 + 7 + ((3 + 3 * 8 * 7 + 2 * 8) * 6 + 2 + (5 * 2 + 6) + 6)
7 * 4
(5 + 8 + 7 + 7 + 8 * 2) + ((3 + 3 * 4) * 8 + 3 + 9) + 3
8 * (7 * 9 * 5) * 4 + 5
3 + 4 + 8 + ((5 * 2 + 5 + 3 * 9 * 2) * 2 * 2 + 2 * 8) * (9 + 6 + (8 * 7 + 5 + 5) * (5 * 8 * 7 + 5 + 4 + 8)) * 3
((7 * 4) + 3 + 7 + 9 + (9 + 6 * 5 + 5) + 4) * 7 + 2 + 5 * (4 + 9 + 2 + 8 + 6 + (5 * 4 * 6 + 6 * 9)) + 4
(8 * 2 * 9 + 6 * (6 + 6 * 4 * 9 + 5 * 5) * 9) * 8 * 7 + 2
(6 + (4 + 4) + 3) + (6 + 5 + (6 + 9 * 3 + 6 * 4) * 3 * 7) + 2 + 2 + 8
9 * 5 + 6 + 3 + (6 + 3 + 3) + ((5 * 3 * 2) + 7 * (6 * 7 + 6 * 8 * 2) * 9 + 5 * (5 + 4 * 8 + 2 + 3 * 4))
5 * ((4 * 9 * 9) * (8 + 4) * 2 * 6) + (2 * 7 * 7 + (5 + 7 * 9 * 4)) * 4
8 * 3 * ((6 * 8) * 4 * (3 * 6 * 3 * 4)) + 4 + (5 + 9 + 5 + 3 * (2 + 9) * (7 + 4 + 9 * 8 + 9))
8 + (6 * 9 * (7 * 2 + 7 * 2 * 5 * 7) * 3 + 4) + 6
2 + (7 + (2 * 3)) + (4 + 8 + 6 + 5 * 9)
7 + 6 + ((3 + 2 * 4 + 9 * 8) + 3 * 6 + (7 + 3) + 3 * 2) + 4 + 4
2 * 2 * (3 + 3 + 6 * 6 * 7 + 6) * ((4 + 6 + 5 + 9 * 3) * 8)
(9 * 8 * 9 * 3) + 9 + 4 + 8 * 7
3 + ((8 * 6 + 4) * (5 * 6 * 5) * 4 * 5) * 8 + 6 * 4 * 9
((4 + 7 + 4) * (5 + 6) + 8 + 8 * 9) + (2 + 2 + 3) * 9 + 9
(5 + 9 + 8 + 9 + 9 + 8) + 7 * 8 + 4 * 2 + 2
(8 * (8 * 2 + 3 + 8) + 6 * 9) * (4 * 6 * 5 + (4 * 2 * 7) + (8 * 7)) * 4 * (4 + 3 * 2) * 7 + 3
5 + 5 * (6 * 9 + 8 + 6) + 2 * 9
(2 * 7 * 5 + (8 * 2 * 3 + 9)) * 7 + 2 + (4 * 3 + 9 + 3 + 3) * 2 * 5
4 + (3 * 7 * 9 * (5 * 2 * 4)) + (7 * (7 + 5) + 3 + (3 * 9 * 5 + 2 * 6 * 3) + (4 + 9 * 8 * 8 * 5 + 9) * 5) + 4 * 7 + 8
9 * 8 + ((8 * 8 * 2 + 2 * 5 * 8) + (5 * 5 * 8) * (7 + 7 * 2 + 9)) + ((5 + 6 + 6 + 6 * 6 + 2) * 3 * 4 * 3 * 5 * 4) + 7
8 + 4 + 7 + 4 * 9 + (6 + 6 * 2 + 8 * 2 + (6 * 2 * 4))
((5 * 9 + 3 * 4 * 3) * 2) + 7 + (2 * (8 * 4 * 8 * 8 * 8 + 2) * 2)
4 * 2 * 8 * 3 * (5 + (6 * 3 * 7 * 2) * (2 + 5 + 6 + 9 * 5))
7 + 3 + (5 * (9 * 2 + 9) + 4)
9 + 6 + 2 + 4 * ((6 + 7 * 3 + 5 * 9) * 2 * 7 * 6 + 3 + 7) * 6
(9 * 5 * 6 + 3) * 5 + 3
9 * 9 + 3
6 + 7 + 7 * 5 * 9 * (7 * 8 + (7 + 2 * 8 * 6 + 5 + 4))
8 + 5 * 5 + 3
9 * ((4 * 7 * 6 + 3 + 4) * 5 + (6 + 3 + 7) + 7) * 9
3 + (5 + 3 + 4 + (7 + 3 + 5) * 8) * 5 * ((3 + 6 * 8) + 3 * (4 * 6 + 4) + 5 + 5)
3 * 3 * (7 * 2 + 7 * 6 * 9 + 5) * 2 + 6
4 + 5 * 7 + 3 * (2 + 5 * 6 + 7) + (8 + 2 + 6)
3 + 7 * 7 * 2 * (7 + 6 * 7 * 7 + (6 * 5))
7 + 2 + (3 + (3 + 7 + 2 * 6 * 8 + 4)) + (2 + 8)
(9 * (5 * 6 * 3 + 9)) * (7 + 4 * 5 * 3 + 3) * (2 * 3 + 8 + 3)
(8 + 8 * 7 * 3 * 8 * (2 * 9 * 9)) + 3
2 + (3 + (5 * 6 * 2 * 4) * 3 + 7 * 4 + 9) * (2 + 7 + (4 * 5 + 8 * 5 + 9) * 9 + (3 + 4 * 8 * 2 + 8 + 4) * 6) + (3 + 3 + 9 + 4) + (6 + 4 * (6 + 7)) + 4
4 * 8 + 2 + (8 + (9 * 3 * 8) + (3 * 8) * 2 + 8) + 2 * 3
2 + ((2 * 5 + 4 + 8 + 3 * 7) + 3 + 3 + 6 * 3)
9 + (2 * (5 + 3 + 2 + 9 + 2 + 3) * 7 * 4 + (8 * 2 + 7))`
;

var inputs = puzzleInput.split('\n');

var part1Test1 = `1 + 2 * 3 + 4 * 5 + 6` ; // 71
var part1Test2 = `1 + (2 * 3) + (4 * (5 + 6))` ; // 51
var part1Test3 = `2 * 3 + (4 * 5)` ; // 26
var part1Test4 = `5 + (8 * 3 + 9 + 3 * 4 * 3)` ; // 437
var part1Test5 = `5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))` ; // 2240
var part1Test6 = `((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2` ; // 13632

var part2Test1 = `1 + 2 * 3 + 4 * 5 + 6` ; // 231
var part2Test2 = `1 + (2 * 3) + (4 * (5 + 6))` ; // 51
var part2Test3 = `2 * 3 + (4 * 5)` ; // 46
var part2Test4 = `5 + (8 * 3 + 9 + 3 * 4 * 3)` ; // 1445
var part2Test5 = `5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))` ; // 669060.
var part2Test6 = `((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4` ; // 23340

// ========== PART 1 ========== 




function basic (input) {
    // if it's just a number, do nothing
    if (!isNaN(Number(input))) { Number(input) }
    // if there's brackets, do that first
    while (input.match(/\(/)){
        input = input.replace(/\([^()]+\)/, match => 
            basic(match.slice(1, match.length - 1))
        );
    }
    // do all the calculations until it's just a number
    while (isNaN(Number(input))) {
        input = input.replace(/(\d+) ([+*]) (\d+)/, (match, a, op, b) => 
            op == '+' ? parseInt(a) + parseInt(b) : parseInt(a) * parseInt(b) 
        );
    }
    return Number(input);
}

(async function(){
    console.log("===== Part 1 =====");
    let runningTotal = 0 ;
    for (input of inputs) {
        runningTotal += basic(input);
    }
    console.log("Sum of resulting values = " + runningTotal);
})();
// 18213007238947





// ========== PART 2 ==========


function advanced(input) {
    // if it's just a number, do nothing
    if (!isNaN(Number(input))) { Number(input) }
    // if there's brackets, do that first
    while (input.match(/\(/)){
        input = input.replace(/\([^()]+\)/, match => 
        advanced(match.slice(1, match.length-1))
      )
    }
    // if there's addition, do that
    while (input.match(/\+/)){
        input = input.replace(/(\d+) \+ (\d+)/, (match, a, b) => 
        parseInt(a) + parseInt(b)
      )
    }
    // if there's multiplication, do that
    while (input.match(/\*/)) {
        input = input.replace(/(\d+) \* (\d+)/, (match, a, b) => 
        parseInt(a) * parseInt(b)
      )
    }
    return Number(input);
  }
  




(function(){
    console.log("===== Part 2 =====");
    let runningTotal = 0;
    for (input of inputs) {
      runningTotal += advanced(input);
    }
    console.log("Sum of resulting values = " + runningTotal);
})();
// 388966573054664


