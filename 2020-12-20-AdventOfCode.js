var inputs = 
`Tile 1237:
######..#.
...##.#..#
....#..#..
.#.#......
#..##.....
#.#..#..#.
......#..#
#.....#...
..........
..#.#.....

Tile 2113:
.##.####.#
.##.#.#.##
#....#...#
........#.
##.##.#.##
..#.#.....
#.##....#.
.##.......
.......#.#
##..##.#..

Tile 3089:
....###..#
##...#..#.
.....#.#..
...#.....#
..........
#........#
##.##..#.#
....###...
#.#....#..
#####..#..

Tile 1217:
#..#...###
#.#.......
.......###
#.........
....#....#
#..#....##
#.......##
#........#
#.#..#..#.
##....##.#

Tile 2129:
.###.##.##
##.......#
#....#....
#......#.#
#..#.#..##
#.......#.
##....####
..#.....##
#........#
...##.####

Tile 1861:
##.##..#..
...#.#...#
#....#....
......##.#
...#.....#
.........#
##....#...
##...#....
.#...#.##.
#.#.###...

Tile 3907:
.#.#.#...#
........##
##.......#
#......#..
#......##.
..#......#
#.#..#....
...#....#.
.......#..
.#.####.##

Tile 1549:
##.#......
....#.#.##
...#.....#
..........
..#......#
...##....#
..........
#.......#.
##...#...#
.###.##..#

Tile 2699:
..####...#
.##.#..###
..#..##.##
#.#.#...##
#.....#...
#.......##
###...#..#
.....#....
#........#
.#.###....

Tile 2593:
.#....#...
....#.#...
....##....
##...#...#
...#....##
#...#..#.#
..##.#..#.
..####....
.#..#..#..
...###.##.

Tile 3209:
.#..#....#
.....#...#
#.........
..........
#.........
.....#..#.
#.........
##........
..#.......
#.#.....##

Tile 1789:
###..#..#.
#.#..##.##
#...##...#
#.........
..#.#.....
..####..##
#.#..###..
......####
#....####.
..##.#..##

Tile 2111:
#.##.#.###
.#..#....#
.#.#..#...
#.......#.
.......#..
#......#.#
#.........
.....#...#
##.....#..
..##.#..##

Tile 3137:
.####..##.
##.##....#
#....#....
#.........
..#...#.#.
#.#..##.#.
..#...#..#
..#..#.#.#
.......###
#.##...###

Tile 1871:
#.####....
#....#....
......#..#
#.......##
##.#....##
..#..#....
#..#...#..
#.#...#.##
#.##.....#
.##.....##

Tile 3119:
######.##.
..#..##..#
.......##.
#...#.#..#
..#...#...
#..#....#.
#....#....
#......#.#
#.........
......#.##

Tile 1579:
.#.#.#....
#..#.....#
###.....#.
..#.#....#
####......
#.#......#
.......#..
...#.....#
.#####...#
#..#....##

Tile 1249:
#...####..
#.........
...#.....#
#......#.#
....##....
#..#..##.#
#..#.....#
....#.#...
#.#....#..
.##...#.#.

Tile 1319:
....#.####
#.#..#.#.#
#......#..
..#.#.#..#
..#....#.#
##....#.#.
###...#...
###......#
..#..#..##
..#.#..##.

Tile 1987:
.#...####.
...#...###
...##...##
..#..#..#.
##.....#..
#..#....##
.#.....#.#
#......#..
##......#.
..###...#.

Tile 2963:
.##.#####.
#.##...##.
#..##.....
..#......#
..##.....#
.#..#..#.#
..........
#...#..##.
...#......
##..#####.

Tile 1609:
..##..###.
.....#..#.
.....#....
##....#...
###..#...#
##....#..#
......##..
..#..###..
#....#.#..
...##....#

Tile 2267:
...#.#..#.
..##....##
####..#.##
....#.##.#
##..#.....
..##.#....
#.##...###
#..##.###.
..........
..#..##...

Tile 1531:
#.#..##..#
#........#
#.....####
....#...##
#.....##.#
#.........
......##.#
.#.#..#..#
.........#
#..#.#.#.#

Tile 2357:
.......#..
...#..#...
.......#..
.#...#.###
#.####...#
.#.#.....#
#.#.....#.
.###..##.#
#.#.#...#.
##.#.#####

Tile 1373:
.#.....###
..#...##..
..#......#
...#...#.#
.#..#.#..#
......#...
#...##..#.
#...#..##.
...#......
##.#.#...#

Tile 3373:
...##.#.##
#.........
....#....#
#..###...#
#...#...##
......#.##
........#.
.......##.
#..#...#..
.##..#.#..

Tile 1831:
...#####.#
#........#
#.....#..#
#.#...###.
...#.##..#
..##.....#
..#....#..
......##.#
##...#....
##.###.#.#

Tile 3607:
#...#.#...
.#...##.##
.#.......#
..####....
####....#.
.#.#...#.#
###...##..
#......#..
###.#..#.#
##.##..###

Tile 3251:
##.#..##..
.#....##.#
#.......#.
..#..#..#.
#..##....#
#...##..##
.....#..##
...#...##.
....##....
#####...##

Tile 3917:
.##.......
.#..#...#.
....##...#
#.#..##.##
.#.#...#..
..#.......
.....#..#.
.#..#.#..#
...##..#.#
##..#...##

Tile 1489:
.##..##.#.
##...#.#.#
#.......#.
##.#.....#
.#...##..#
..#.......
.#..#....#
###..#..##
#..##.....
#######...

Tile 3253:
#..#..####
....#..#..
#.##..#...
.##....###
........##
..........
#...#.....
##...#...#
...##.....
.##..##.#.

Tile 2081:
.......##.
#...#....#
#..#....##
##....##..
#.#.###...
.....#....
#...###.##
##..##....
#........#
.#...#..#.

Tile 1481:
######..#.
###.#....#
.....#...#
#.........
#..#....##
#........#
..........
#...#....#
#..#.##...
#####..##.

Tile 2953:
..##.#####
#.#..#..##
..#....#.#
#...#.#...
#..##....#
#.#....#.#
.......#.#
#..##.....
#.#.....##
...##..#.#

Tile 1783:
.#..#.#.##
#...#....#
...#......
#.#.#..#.#
.........#
......#...
.#...#..##
..#...#.#.
#..#..#..#
...#..#.##

Tile 2269:
#.#.##..#.
#.....##..
.#.......#
..#..#...#
....#.....
..........
##.##....#
.....#....
##.....###
.#.#####.#

Tile 1277:
..##..#...
#...#.....
.......#..
...#......
....#....#
..#.......
#......#..
.#........
#.........
###.###...

Tile 2633:
####.#.#..
......#.#.
........#.
#.........
...#...###
...#.....#
.##.#..#.#
.#........
#.#......#
.##.##.#.#

Tile 3919:
###..###..
...#......
...##.#..#
#...#..#.#
.........#
...#.#.#..
...#.#....
#....#...#
.#.###..##
.#.#.##...

Tile 1753:
#...##....
#.....#...
..........
.#..#.....
#.......##
..#.......
......#..#
#..####...
....#..#.#
..#.####..

Tile 3739:
.##.#.#..#
###.##.##.
##.###.#..
.#....#..#
#...##....
#..#......
#....###.#
..#.......
###....#.#
...###..#.

Tile 3701:
.####..#.#
#.....#...
.#........
.........#
...#.#....
#.#.......
#...#....#
.###.#.##.
#.#.......
##.##..##.

Tile 3631:
#..#..###.
.........#
#...##....
.......#.#
.....#....
...#..#..#
........#.
..#....#.#
......#...
##.#..#.#.

Tile 2389:
..#.##...#
###.......
#..##...##
#.######..
..#..##...
.#...#...#
.....#...#
#..#....#.
..#...##..
#...#..##.

Tile 1123:
.##.#.###.
#........#
#.........
#.....##.#
....#.....
....##.#.#
....#....#
#.#.#..#.#
#..#.....#
#.#..#..#.

Tile 2659:
#.##.#.##.
.#........
#....#..##
###..##.##
#.#.###..#
#...##...#
...#...#..
...#..#...
..#.#.#..#
####...#..

Tile 3709:
.##...#.##
..#..##..#
......#.##
......#..#
....#.....
..........
#......#.#
#....##..#
.....##..#
####.##...

Tile 2887:
######..##
#.........
.......#.#
...#.#....
#....##...
#...#....#
...#.#...#
#....#...#
##....#..#
#########.

Tile 1367:
#.####.###
#......#.#
..........
#....#....
.#......#.
#.........
...#.#.#..
......#...
##....#...
.....##.##

Tile 2221:
##..#.....
#.....#...
.........#
#..#......
#.#...#...
###......#
...#.....#
#........#
#.....#...
..##.###..

Tile 2621:
##..#.###.
.......###
.........#
..#.#...#.
..........
....#.....
#.##..##..
......#..#
....#...#.
##.#.....#

Tile 2503:
..#.##.##.
......#...
#.#..#....
....#....#
#.....#...
..#......#
##...#..#.
#....#..#.
...#......
#....####.

Tile 3491:
#..#.###..
#.........
#..#..#..#
###....###
#.#.##....
#........#
......#...
##...#...#
##........
.#.#.##.##

Tile 2333:
..##.....#
.....#..#.
#.#.#..#.#
##.##...#.
..#.#.....
...#.....#
..###..#..
###.....##
#........#
##.####.#.

Tile 2399:
.....#.##.
##.....#.#
##.......#
.#.#..##.#
#...##...#
###.#....#
#......#..
##......#.
#.#....#..
.....#.#..

Tile 2683:
#.##..##..
.#....#..#
.........#
.......#.#
.##.#..##.
.....##..#
#....##..#
....##.#.#
...###.###
.#.##.#.##

Tile 1741:
.##..#.#.#
.##....#..
##..#.....
##...###..
......#..#
#.....#...
.......#..
#.....#...
...##..#.#
#..###.##.

Tile 3539:
.###....##
..........
.##.#...#.
.....#...#
.........#
.........#
.......#..
..#.....#.
.#.#.###.#
#.#.####.#

Tile 3929:
##..######
.#..##.###
#.##....#.
...##..#.#
#...#.....
........#.
.....#...#
#...#.#..#
.#.#.....#
..##.#..#.

Tile 3221:
..####..#.
##......#.
..#..#.###
##........
....#....#
.#...#...#
#.#...#..#
##....#..#
##......#.
.#..#..##.

Tile 1117:
.##.##.#.#
##.....###
#.#.#.##..
..#....#..
##....#...
...#..##.#
..#.#.#..#
...#...#.#
....##...#
.###.#..##

Tile 3163:
.####.#.#.
#.........
..........
......#..#
....##.#..
.#....#..#
.....####.
#....#.#..
...#.#..##
##.#.#....

Tile 1129:
.....##...
##......##
#..#..#..#
..#....#..
#.#...#...
....#.##..
...#...#..
#.........
#..#..#.#.
#.#..###.#

Tile 3079:
###..#.##.
....###...
##..#....#
....##...#
......##..
....#....#
#.#.#.....
#...#....#
.#........
.##.#.###.

Tile 2039:
.#.#.##..#
..##......
.##.......
#.........
....#...##
#..#.#...#
..........
#.....#..#
####..#..#
.#..#..##.

Tile 1901:
####.#.##.
#.#...##..
...#....##
..........
#.........
#...##...#
..........
##......##
.#.....#..
.###.##...

Tile 2029:
####..##..
##...#....
.#....##.#
..#....##.
#........#
..........
..........
#..#..#...
#..#....##
....####..

Tile 1879:
##..#.##.#
#...#...##
.##...#.##
.#.#.....#
.##.#..#.#
#..##.....
#..##...#.
......#.##
...#..#..#
#....#..#.

Tile 3347:
###..#..##
.#..#....#
.#...#...#
....#....#
.#......##
......##.#
.....#..##
.........#
#......#..
.####.#..#

Tile 2417:
####.#..##
...#.#....
.#....#..#
.#........
#.........
.....#....
#..##.....
#..#...#.#
#..#.##..#
..##..####

Tile 2897:
...#..#.##
#.#.......
.........#
#.#.#..#..
..#.......
.........#
.##...#..#
....#..###
.###...##.
.#.#.#.#..

Tile 2837:
.#....###.
.......#..
......#..#
#..#..#.##
#.#.##...#
#...#....#
...##.#.#.
#.....#..#
#.#.....#.
#####.####

Tile 3001:
##....#..#
#....#.#..
.....##..#
.....##..#
...#......
#.....#..#
#.#...##.#
.#...#...#
........#.
###.####.#

Tile 2153:
.####.##..
#..#.....#
..#....#..
#......#.#
.........#
.###.....#
#.##.....#
#..#......
#.#.......
.######..#

Tile 2749:
..##.###..
#..#...#..
..##.....#
###.......
#..##.....
......#..#
..#..##...
.###.....#
#.#.......
...#..#..#

Tile 2791:
..##.##.#.
.##.###.#.
.#..#....#
.##..#.#.#
#..#....#.
......##..
#.##.#.#.#
##...#.##.
.#...#.#..
...#.#...#

Tile 2707:
..###...##
.#....#...
..#...##..
#.#.......
....#....#
#.....#...
.........#
##.....###
#........#
#.##.#####

Tile 2969:
..#####..#
..........
#.....#..#
....#.#..#
...#......
..##.#...#
...#.#....
...#.....#
..#.......
####..##.#

Tile 3329:
#.###..#..
...#....#.
........#.
.........#
###.#..#.#
.#.......#
.........#
.......#..
#....##..#
##.###.#..

Tile 3989:
.#####.###
#....#.#..
.........#
.........#
##.#...#.#
......#..#
...#.....#
###......#
.#.......#
.###.##.#.

Tile 3583:
..#..#.#..
.#........
###...##..
##.....#..
##.......#
#.........
#.........
#...#..#.#
##.#......
#.........

Tile 3931:
....#..#..
#.#.#.....
..#..#..#.
.##...##.#
.......#.#
.........#
....#...##
......#..#
#.#....#..
#.#.#.##.#

Tile 1493:
####..##.#
..........
....#..#..
##...####.
#.........
#.........
.#.#.....#
....##...#
......##..
.#########

Tile 1013:
#.###....#
....####.#
...#.####.
.......##.
.#..#....#
#.........
#......#..
...#...#..
#.....#...
#.#.#####.

Tile 2089:
.#...#.##.
..#...#..#
........#.
...#.#..#.
.....##..#
#...###...
#....#.#..
#....#..#.
#...###..#
........##

Tile 1613:
#.#...####
#.....#...
#....##..#
#....#....
.#....#...
#........#
......#.#.
#.....#...
##...#...#
....#..##.

Tile 3331:
.#.#.#####
.....#...#
.......#..
##..#...#.
#........#
......#..#
..#.#....#
.......#..
..#.......
###.###..#

Tile 3217:
..#.###...
#.##......
..#...##..
...#.##..#
###...###.
#...#.#.#.
##.#...#..
.........#
.....##...
##.###....

Tile 3011:
#.##.#....
....#...##
..........
#........#
#....#...#
#..#......
..........
.........#
....##....
##.####...

Tile 1171:
###..###.#
..#.....##
##.#...#..
.#.......#
..........
##.....##.
.##.....##
..#...####
##.##..#.#
#.#.#.#...

Tile 1933:
#####..#..
#.#.#.#...
#.#.......
#.#.#.....
.....#...#
#.#.......
..........
...#..#...
.##....#..
......#...

Tile 2141:
#.###...#.
#.....#...
.........#
.....#..#.
#.###.....
#..###.#..
.....#..#.
....#....#
.#.......#
...##..##.

Tile 1031:
###...#..#
#.......#.
##.#..#..#
##..#.....
#...#.....
##....#...
#......##.
#.........
......#..#
....#..##.

Tile 2857:
#.#..#...#
#........#
##.#..#.##
....#.##..
....#...##
#...#.....
#..#......
.......###
#...####.#
.#...####.

Tile 3313:
.#......##
...##.....
.#.##.....
#.#.#.....
#.#..#....
..#.......
#..#.#...#
#.#......#
##...#....
..###.##.#

Tile 1303:
#.##.#....
#.......##
...#...##.
....##...#
.....#...#
.........#
#..#...#.#
##...##...
...#.#.#..
....##..##

Tile 3457:
#...#.#..#
.........#
#.#..#...#
.....#.#..
........##
...#......
..##.##...
..........
....#....#
#...#..#.#

Tile 3643:
##.##..###
..#.#....#
..##.....#
..#.......
#.........
#.........
#.......#.
......#..#
.#......#.
.###..##.#

Tile 2803:
#...#..##.
##....#.##
.#.......#
#...###...
#...###..#
#..#......
.......#.#
#.......#.
...##.....
..#..##.##

Tile 2549:
.#....####
.#........
.....###..
.....#..##
..#.###...
......#...
.........#
.......##.
#......#.#
..###.####

Tile 3571:
#..#.##...
...#....#.
..##..##..
....#.##.#
.#.....#..
.##...#...
.##......#
#.#......#
......#...
.#..#..#..

Tile 1327:
#..###...#
#....#...#
#.##...#.#
#.......#.
#.#...#..#
.........#
##........
....#..#..
.....#..#.
.#.###..##

Tile 2833:
##...#..#.
##....#..#
##.#.....#
.......#..
###...#..#
.........#
#.#....###
....##.#..
..#...#...
..#.#.#.##

Tile 1997:
##..#...##
#...#.....
#.....#...
.......#..
.......#.#
#.........
#......#..
.........#
..#.#.#..#
.###.##..#

Tile 3673:
..#..###..
.#..##....
#.##.....#
.####..###
##..#..#..
#.#.#...##
.#....#.#.
....#.##..
#...#....#
..#.##....

Tile 3323:
.#...#####
#..#...#.#
..........
#....#...#
.#........
#........#
##......##
...##...#.
...#.#..##
#.##.###.#

Tile 1619:
#..###.###
#...##...#
.#........
#.#.....#.
#.##.....#
#......#..
.......#..
#####.#..#
..........
####...#..

Tile 2477:
.##.##..#.
#.#.#.....
......#..#
......#.#.
##.##.....
.###.#..#.
.........#
...#.#....
#.....#...
...##.#...

Tile 3389:
#...#.#.##
##.#.....#
......#..#
#..#.#...#
#....#..#.
##......##
....#...##
#.##..##..
#........#
...##.#.##

Tile 1193:
.##...###.
#...##..#.
###.......
#.#..#....
.#..#.#...
#..##....#
#.#..##...
####.....#
#...#..#..
..##.....#

Tile 3767:
#...#.....
...#.#..#.
#######...
...#.#....
#.........
.#....##..
#.#.......
.#.#.#..#.
..#.###..#
....##.#..

Tile 3191:
#.##...#..
..........
......####
#..#..#...
....#.#.##
......#.#.
.....#....
.#....##.#
..#..#.#.#
#...##.#.#

Tile 3049:
#...#...#.
.#..#....#
##.#.....#
...#...##.
#.##.....#
.....#.#..
..##..##..
..........
#....#.#.#
#.##.#..#.

Tile 1747:
###....#..
....#..#.#
.......#..
........#.
#..#......
.......###
...#.##...
.....#..##
.#....#...
.##..####.

Tile 1429:
...#.#.#..
.#...#....
..........
##........
#.........
#..#.#....
.##.......
.#........
.##.#.#..#
#####.##.#

Tile 2909:
#.##.###..
#..#.....#
#...#.....
.#..#.##..
#.#.....#.
#...#...##
...#...#..
.##.....##
##..#..#.#
#.###..###

Tile 1973:
#####.#.#.
...#.....#
#.........
#........#
.....###..
..........
.#.....#.#
.##..#.##.
##.#..#...
#.##...#.#

Tile 3449:
.#.#.#..#.
#...#.#...
..#.##....
#...###...
.....#...#
#.......#.
##....#.##
......#..#
#.......#.
..####....

Tile 3371:
##.#..#.#.
#...##...#
##...##...
.#....#...
#...##...#
..#......#
......#..#
##.###...#
#....#...#
.##....#..

Tile 1103:
####..#..#
.......#..
#......#.#
..........
.#....##..
.#.##...##
##....##.#
..#..#.###
..........
.#.#...#.#

Tile 1723:
.#....###.
...#.#...#
..#.#.....
#####....#
.#.#......
....#..#..
..#.......
..##...#.#
....###...
...##.#.#.

Tile 1093:
..##.#.###
.##.......
#....#....
.#.....#..
#.......##
.........#
.#......##
#......#.#
#..#.#...#
#.#####.#.

Tile 1321:
#.#.###.#.
.#..##..#.
#.###..#..
#..##....#
#.......#.
....#....#
#....#...#
.....#....
#.###.....
.###...##.

Tile 1979:
#####.###.
#.#..#..#.
#.####....
###.....##
....#.....
#.........
###.#..#.#
..##...###
#.......##
..#.......

Tile 2677:
##..#.##.#
#.##.....#
#..#...#.#
..#.#.#..#
##.#..#..#
.....#..#.
#...#...##
...#...###
##.#...#..
.###..##..

Tile 1553:
.#...###..
.........#
###.......
##..#...#.
..#...##.#
..##......
.##.......
...#..#...
#....##...
#####.#...

Tile 3187:
###..#..#.
#.....#...
.....#..##
#.....#..#
..#......#
##...#....
......##.#
......#...
#.#..#....
########.#

Tile 2243:
##.####...
..#.#.#..#
#..#......
.........#
....#...##
#.........
#......#.#
....#....#
......#.##
##.#....#.

Tile 1423:
..#..##..#
..#....#.#
#.#.....##
##.......#
.#..#..#..
......##..
##...##...
.....##..#
...#.#.#.#
##...###..

Tile 3319:
##.##.#.#.
#.......#.
....#.....
###....###
........#.
###.......
.#.....##.
#...#....#
..#.......
.##...####

Tile 3343:
.#...#####
..........
.###...#.#
.##.......
..........
##....####
#......#.#
#.#.###..#
..#.......
.#####..#.

Tile 2789:
##....####
.##.......
#......#.#
.#.##.....
#......#.#
#........#
##......#.
.#...##...
#.....##.#
...###.#..

Tile 3623:
##..#..#.#
#.....#.#.
##.....#.#
.#...##..#
.#.......#
..#...#..#
.#..#..##.
###..#.###
.#.##.#..#
.#.##.#.#.

Tile 1439:
.#..#.#.#.
....#.....
.........#
#..#......
##..#....#
#.#.#.##..
##.#.#...#
#.........
#.......#.
####...#.#

Tile 1361:
#.#...###.
#.........
....#.....
..#.......
......#..#
##....##.#
.##..#..##
..#......#
.....##..#
#..#....#.

Tile 1823:
.##.#.#...
#.........
#..#.##.#.
#...##....
##........
#...#.#.##
#........#
.........#
........#.
#.###...#.

Tile 2971:
.#.......#
#.#....#..
#..#.#....
...#..#...
##....#...
#..#......
.........#
....##....
#...###..#
#...#.#.#.

Tile 3229:
..###.####
#........#
.#.......#
..........
##.......#
#..#......
.#.#......
#.....##.#
.#......#.
.#####.#.#

Tile 1907:
####.#.#..
....#....#
#....#....
#.........
#...#..###
...#.#.#.#
....##....
#.###..###
..#..##.##
..##.##...

Tile 1699:
..#..##...
.#..#.#...
.....#...#
.#.#.#...#
........#.
##.....#..
#.#......#
.##......#
....###.#.
...##..###

Tile 2131:
#..#####..
#....#...#
#..####..#
......#..#
#.#..#...#
#.#...#..#
..##......
#.#####..#
......#..#
#...####.#

Tile 1657:
..#..##.#.
#....##...
##..#....#
#........#
#.........
#.......##
#......###
#.#.#...##
........##
#.##.#.##.`;





// ========== PART 1 ========== 





(async function(){
    console.log("===== Part 1 =====");

    let tiles = Object.fromEntries(inputs.split('\n\n').map(tile => tile.split(':\n')).map(tile => [tile[0].split(' ')[1], tile[1]]));
    let tilesAtBorders = {};
    let tileBorders = {};
    for (let [id, tile] of Object.entries(tiles)) {
        let top = tile.split('\n')[0];
        let topFlip = top.split('').slice().reverse().join('');
        let bottom = tile.split('\n').pop();
        let bottomFlip = bottom.split('').slice().reverse().join('');
        let left = tile.split('\n').map(p => p[0]).join('');
        let leftFlip = left.split('').slice().reverse().join('');
        let right = tile.split('\n').map(p => p.split('').pop()).join('');
        let rightFlip = right.split('').slice().reverse().join('');
        tileBorders[id] = [top, topFlip, bottom, bottomFlip, left, leftFlip, right, rightFlip];
        tileBorders[id].forEach(border => {
            if (!tilesAtBorders.hasOwnProperty(border)) {
                tilesAtBorders[border] = [];
            }
            tilesAtBorders[border].push(id);
        });
    }
    let multiplied = 1;
    for (let [id, borders] of Object.entries(tileBorders)) {
        let tileNeighbors = new Set();
        for (let border of borders) {
            tilesAtBorders[border].forEach(nId => tileNeighbors.add(nId));
        }
        tileNeighbors.delete(id);
        if (tileNeighbors.size == 2) {
            multiplied *= id;
        }
    }
    console.log('Multiplied corners : ' + multiplied);

})();
// 29584525501199




// ========== PART 2 ==========






(function(){
    console.log("===== Part 2 =====");

    let tiles = Object.fromEntries(inputs.split('\n\n').map(tile => tile.split(':\n')).map(tile => [tile[0].split(' ')[1], tile[1]]));

        function getBorders(tile) {
            let top = tile.split('\n')[0];
            let bottom = tile.split('\n').pop();
            let left = tile.split('\n').map(row => row[0]).join('');
            let right = tile.split('\n').map(row => row.split('').pop()).join('');
            return [top, bottom, left, right];
        }
        let borderIdxs = {};
        let borderPositions = {};
        let firstId = Object.keys(tiles)[0];
        getBorders(tiles[firstId]).forEach((border, i) => {
            borderIdxs[border] = i;
            borderPositions[border] = [0, 0];
        });
        function rotate(tile) {
            let flatTile = tile.replaceAll('\n', '');
            let rotated = '';
            for (let i = 0; i < 100; i++) {
                rotated += flatTile[9 + i * 10 % 100 - Math.floor(i / 10)];
                if (i % 10 == 9) {
                    rotated += '\n';
                }
            }
            return rotated.trim();
        }
        function getPlacement(borders) {
            for (let [i, border] of borders.entries()) {
                if (!borderIdxs.hasOwnProperty(border)) {
                    continue;
                }
                let j = borderIdxs[border];
                if ((i == 0 && j == 1) || (i == 1 && j == 0) || (i == 2 && j == 3) || (i == 3 && j == 2)) {
                    return [borderPositions[border][0] - (i == 3) + (i == 2), borderPositions[border][1] - (i == 1) + (i == 0)];
                }
            }
            return false;
        }
        let tilePositions = Object.fromEntries([[firstId, [0, 0]]]);
        let topLeft = [0, 0];
        let tilesLeft = new Set(Object.keys(tiles));
        tilesLeft.delete(firstId);
        while (tilesLeft.size > 0) {
            let placedId;
            let placedTile;
            let borders;
            let position;
            for (let id of tilesLeft.values()) {
                placedId = id;
                placedTile = tiles[id];
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
                placedTile = rotate(placedTile);
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
                placedTile = rotate(placedTile);
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
                placedTile = rotate(placedTile);
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
                placedTile = placedTile.split('\n').map(row => row.split('').reverse().join('')).join('\n');
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
                placedTile = rotate(placedTile);
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
                placedTile = rotate(placedTile);
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
                placedTile = rotate(placedTile);
                borders = getBorders(placedTile);
                if (position = getPlacement(borders)) break;
            }
            tiles[placedId] = placedTile;
            tilePositions[placedId] = position;
            topLeft = [Math.min(topLeft[0], position[0]), Math.min(topLeft[1], position[1])];
            borders.forEach((border, i) => {
                borderIdxs[border] = i;
                borderPositions[border] = position;
            });
            tilesLeft.delete(placedId);
        }
        let mapSize = Math.sqrt(Object.keys(tiles).length) * 8;
        let pitch = mapSize + 1;
        let map = ('?'.repeat(mapSize) + '\n').repeat(mapSize).split('');
        for (let [id, position] of Object.entries(tilePositions)) {
            let tile = tiles[id];
            let mapI = (position[0] - topLeft[0]) * 8 + (position[1] - topLeft[1]) * 8 * pitch;
            for (let i = 0; i < 64; i++) {
                map[mapI + i % 8 + Math.floor(i / 8) * pitch] = tile[12 + i % 8 + Math.floor(i / 8) * 11];
            }
        }
        map = map.join('');
        let monsterDef = new RegExp('..................#.(.|\n){' + (pitch - 20) + '}#....##....##....###(.|\n){' + (pitch - 20) + '}.#..#..#..#..#..#...', 'g');
        let monster = map.search(monsterDef);
        for (let i = 0; i < 7 && monster == -1; i++) {
            if (i == 3) {
                map = map.split('\n').map(row => row.split('').reverse().join('')).join('\n');
            }
            else {
                let flatMap = map.replaceAll('\n', '');
                map = '';
                for (let j = 0; j < mapSize * mapSize; j++) {
                    map += flatMap[mapSize - 1 + j * mapSize % (mapSize * mapSize) - Math.floor(j / mapSize)];
                    if (j % mapSize == mapSize - 1) {
                        map += '\n';
                    }
                }
            }
            monster = map.search(monsterDef);
        }
        let monsters = 0;
        let start = monster + 1;
        while (monster != -1) {
            monsters++;
            if (monsters > 25) {
                break;
            }
            monster = map.slice(start).search(monsterDef);
            start += monster + 1;
        }
        let roughness = map.match(/#/g).length - monsters * 15;
        console.log('Water roughness (part 2): ' + roughness);


})();
// 1785 too high






(function(){

    console.log("===== Part 2 V2 =====");

    class Tile {

        constructor(id, data){
            this.id = id;
            this.data = data;
            this.trimmed = []; 
            this.edges = [];
            this.isCorner = false;
            this.neighbors = [, , , ]
        }
    
        setEdges(){
            let left = [];
            let right = [];
            let top = [];
            let bottom = [];
            this.edges = [];
            let tile = this.data.split('\n').map(line => line.split(''));
            for(let y=0; y<tile.length; y++){
                left.push(tile[y][0]);
                right.push(tile[y][tile[0].length-1]);
            }
            for(let x=0; x<tile[0].length; x++){
                top.push(tile[0][x]);
                bottom.push(tile[tile.length-1][x]);
            }
            this.edges.push(top.join(''), right.join(''), bottom.join(''), left.join(''),);
            this.trimEdges()
        }
    
        setCorner(){
            this.isCorner = true;
        }
    
        trimEdges(){
            let tile = this.data.split('\n').map(line => line.split(''));
            tile.pop();
            tile.shift();
            this.trimmed = tile.map(line => {
                line.pop()
                line.shift()
                return line
            })
        }
    
        rotate(){
            let matrix = this.data.split('\n').map(line => line.split(''));
            //console.log( matrix.join('\n').replace(/[,]/g, ''));
            matrix = matrix[0].map((val, index) => matrix.map(row => row[index]).reverse())
            //console.log(matrix.join('\n').replace(/[,]/g, ''));
            this.data = matrix.join('\n').replace(/[,]/g, '');
            this.setEdges();
        }
    
        flipHor(){
            let matrix = this.data.split('\n').map(line => line.split(''));
            //console.log("before");
            //console.log( matrix.join('\n').replace(/[,]/g, ''));
            let flipped = matrix.map(line => line.reverse());
            //console.log("after");
            this.data= flipped.join('\n').replace(/[,]/g, '');
            //console.log(this.data)
            this.setEdges();
        }
    
        setNeighbors(neighborid){
            this.neighbors.push(neighborid);
        }
    
    }

    /* fs.readFile('./data.txt', 'utf8', (err, data) => {

        console.log('question: ', main(data.split('\n\n')));
    }) */
    
    let tileMap = new Map();
    let tiles = new Map();
    
    const main = data => {
        console.log(data);
        data.forEach(line => {
            let [dirtyId, data] = line.split(':\n')
            let id = dirtyId.split(' ')[1];
            let tile = new Tile(id, data);
            tile.setEdges();
            tile.trimEdges();
            tiles.set(tile.id, tile);
            for(let [i, edge] of tile.edges.entries()){
                if(tileMap.get(edge)){
                    let nid = tileMap.get(edge)
                    tile.neighbors[i] = nid;
                    let neighbor = tiles.get(nid);
    
                    neighbor.neighbors.push(tile.id);
                    //do i need to do this or is it passed by reference already?
                    //tiles.set(nid, neighbor);
                } else {
                    tileMap.set(edge, tile.id);
                    tileMap.set(reverseString(edge), tile.id);
                }
                
            }
        })
        console.log(data);
        let val = getNeighborValue(tiles);
        console.log(val);
        let map = createMap(tiles);
        console.log(map);
        let sea = generateSea(map);
        let trys = 0;
        let monsters = 0;
        while(trys <= 4){
            monsters = getMonsters(sea);
            if(monsters){
                trys = 4;
            }
            sea = rot(sea);
            trys++;
    
        }
        if(!monsters){
            trys = 0;
            sea = flip(sea);
            while(trys <= 4){
                monsters = getMonsters(sea);
                if(monsters){
                    trys = 4;
                }
                sea = rot(sea);
                trys++;
        
            }
        }
    
        console.log("Part 2", sea.match(/[#]/g).length - 15*(monsters));
        return val;
    }
    
    const generateSea = (map) => {
        let dim = Math.sqrt(map.size)
        let sea = new Array(8*12).fill('');
        let seaString = '';
        let offset = 8;
        for(let y=0; y<dim; y++){
            for(let x=0; x<dim; x++){
                let trimmed = map.get(`${y},${x}`).trimmed
                trimmed.forEach((line, i) => {
                    sea[offset*y+i] += line;
                })
            }
        }
        let len = sea[0].length*dim;
        sea = sea.map(line => line.split(',').join(''))
        return sea;
    }
    
    const getNeighborValue = (tiles) => {
        let ans = 1;
        for(const tile of tiles){
            //onsole.log(tile[1].neighbors);
            if(tile[1].neighbors.filter(Boolean).length === 2){
                tile[1].setCorner();
                //tile[1].flipHor();
                ans *= Number(tile[0]);
            }
        }
        return ans;
    }
    
    const createMap = tiles => {
        let dim = Math.sqrt(tiles.size)
        let corners = [];
        let map = new Map();
        for(const tile of tiles){
            if(tile[1].isCorner){
                corners.push(tile[1]);
            }
        }
    
        //straight up just guess here lmfao, 2 for test data 3 for problem data
        map.set('0,0', corners[3])
    
        for(let y=0; y<dim; y++){
            for(let x=0; x<dim; x++){
                if(!(y===0 && x===0)){
                    if(x===0){
                        let prev = map.get(`${y-1},${x}`)
                        let bottomEdge = prev.edges[2];
                        for(const neighbor of prev.neighbors){
                            if(neighbor){
                                let neigh = tiles.get(neighbor);
                                if(orient(neigh, bottomEdge, 0)){
                                    map.set(`${y},${x}`, neigh);
                                }
                            }
                        }
                    } else {
                        let prev = map.get(`${y},${x-1}`)
                        console.log("Here");
                        console.log(map);
                        console.log(prev);
                        let rightEdge = prev.edges[1];
                        for(const neighbor of prev.neighbors){
                            if(neighbor){
                                let neigh = tiles.get(neighbor);
                                if(orient(neigh, rightEdge, 3)){
                                    map.set(`${y},${x}`, neigh);
                                }
                            }
                        } 
                    }
                }
            }
        }
        return map;
    
    }
    
    const rot = (data) => {
        if(typeof(data) === 'string'){
            data = data.split('\n').map(line => line.split(''));
        }
        let matrix = data;
        matrix = matrix.map((val, index) => matrix.map(row => row[index]).reverse())
    
        return matrix.join('\n').replace(/[,]/g, '');
    }
    
    const flip = (data) => {
        let matrix = data.split('\n').map(line => line.split(''));
        let flipped = matrix.map(line => line.reverse());
        return flipped.join('\n').replace(/[,]/g, '');
    }
    
    const orient = (tile, pedge, idx) => {
        let counter = 0;
        while(counter <= 3){
            let ledge = tile.edges[idx];
            if( ledge === pedge){
                return true;
            }
            tile.rotate();
            tile.setEdges();
            counter++;
        }
        tile.flipHor();
        tile.setEdges();
        let c = 0;
        while(c <= 3){
            let ledge = tile.edges[idx];
            if( ledge === pedge){
                return true;
            }
            tile.rotate();
            tile.setEdges();
            c++;
        }
        tile.flipHor();
        tile.setEdges();
        c = 0;
        while(c <= 3){
            let ledge = tile.edges[idx];
            if( ledge === pedge){
                return true;
            }
            tile.rotate();
            tile.setEdges();
            c++;
        }
        return false;
    }
    
    const getMonsters = sea => {
        let monster = new RegExp('(.){18}(#)(.){1}(#)(.){4}(##)(.){4}(##)(.){4}(###)(.){1}(#)(.){2}(#)(.){2}(#)(.){2}(#)(.){2}(#)(.){2}(#)(.){3}', 'g');
    
        if(typeof(sea) === 'string'){
            sea = sea.split('\n')
        }
        let chunks = chunk(sea.map(line => line.split('')));
        let sum = 0;
        for (const chunk of chunks){
            if(chunk.match(monster)){
                sum+=1
            }
        }
        return sum;
    }
    
    const chunk = sea => {
        let chunks = [];
        let chunk = [];
        let startx = 0;
        let starty = 0;
        let offsetx = 20
        let offsety = 3
    
        while(starty+offsety <= sea.length){
            for(let y=starty; y<starty+offsety; y++){
                for(let x=startx; x<startx+offsetx; x++){
                    chunk.push(sea[y][x])
                }
            }
            if(startx+offsetx <= sea[0].length){
                startx  += 1
            } else {
                startx = 0;
                starty += 1;
            }
            chunks.push(chunk.join(''))
            chunk = [];
        }
        return chunks;
    }
    
    
    const reverseString = (str) => {
        return str.split("").reverse().join("");
    }


    let day20data = document.getElementsByTagName("pre")[0].childNodes[0].data.split('\n\n').filter(el => el);
    // main(inputs.split('\n\n'));
    // main(data.split('\n\n'));
    main(day20data);



})();